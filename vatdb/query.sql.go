// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package vatdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDataInstance = `-- name: CreateDataInstance :one
INSERT INTO data_instance (
                         value
) VALUES (
             $1
) RETURNING id
`

func (q *Queries) CreateDataInstance(ctx context.Context, value []byte) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createDataInstance, value)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const getDataInstanceById = `-- name: GetDataInstanceById :one
SELECT id, timestamp, value FROM data_instance
WHERE id = $1
`

func (q *Queries) GetDataInstanceById(ctx context.Context, id pgtype.UUID) (DataInstance, error) {
	row := q.db.QueryRow(ctx, getDataInstanceById, id)
	var i DataInstance
	err := row.Scan(&i.ID, &i.Timestamp, &i.Value)
	return i, err
}

const getDataInstancesByTimestamp = `-- name: GetDataInstancesByTimestamp :many
SELECT id, timestamp, value FROM data_instance
WHERE
    timestamp >= $1
  AND
      timestamp <= $2
`

type GetDataInstancesByTimestampParams struct {
	Timestamp   pgtype.Timestamp
	Timestamp_2 pgtype.Timestamp
}

func (q *Queries) GetDataInstancesByTimestamp(ctx context.Context, arg GetDataInstancesByTimestampParams) ([]DataInstance, error) {
	rows, err := q.db.Query(ctx, getDataInstancesByTimestamp, arg.Timestamp, arg.Timestamp_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DataInstance
	for rows.Next() {
		var i DataInstance
		if err := rows.Scan(&i.ID, &i.Timestamp, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDataInstanceTimestampDesc = `-- name: ListDataInstanceTimestampDesc :many
SELECT id, timestamp, value FROM data_instance
ORDER BY timestamp DESC
`

func (q *Queries) ListDataInstanceTimestampDesc(ctx context.Context) ([]DataInstance, error) {
	rows, err := q.db.Query(ctx, listDataInstanceTimestampDesc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DataInstance
	for rows.Next() {
		var i DataInstance
		if err := rows.Scan(&i.ID, &i.Timestamp, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
